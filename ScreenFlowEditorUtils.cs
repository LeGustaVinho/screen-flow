#if UNITY_EDITOR
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using Object = UnityEngine.Object;

namespace LegendaryTools.Systems.ScreenFlow
{
    public static class ScreenFlowEditorUtils
    {
        private static string WEAVER_FILE_TEMPLATE = @"namespace {NAMESPACE}
{
    /// <summary>
    /// Generated code, dont manually change this file !
    /// Generated by ScreenFlowEditorUtils class
    /// </summary>
    public static class {CLASS_NAME}
    {
        {CLASS_MEMBERS}
    }
}";

        private static string WEAVER_CLASS_MEMBER_FORMAT = "public static readonly string {0} = \"{1}\";";
        private static string CSHARP_CLASS_EXT = ".cs";

        public static void WeaverClassFor(ScreenFlowConfig screenFlowConfig, bool refreshAndSave = false)
        {
            if (string.IsNullOrEmpty(screenFlowConfig.WeaverNamespace) ||
                string.IsNullOrEmpty(screenFlowConfig.WeaverClassname))
            {
                return;
            }

            StringBuilder sb = new StringBuilder();

            foreach (var screen in screenFlowConfig.Screens)
            {
                sb.AppendLine(string.Format(WEAVER_CLASS_MEMBER_FORMAT,
                    CamelCaseToAllUpperWithUnderscores(screen.name),
                    screen.name));
            }

            foreach (var popup in screenFlowConfig.Popups)
            {
                sb.AppendLine(string.Format(WEAVER_CLASS_MEMBER_FORMAT,
                    CamelCaseToAllUpperWithUnderscores(popup.name),
                    popup.name));
            }

            string file = WEAVER_FILE_TEMPLATE.Replace("{NAMESPACE}", screenFlowConfig.WeaverNamespace);
            file = file.Replace("{CLASS_NAME}", screenFlowConfig.WeaverClassname);
            file = file.Replace("{CLASS_MEMBERS}", sb.ToString());

            string screenFlowConfigPath = AssetDatabase.GetAssetPath(screenFlowConfig);
            string screenFlowFolder = Path.GetDirectoryName(screenFlowConfigPath);

            File.WriteAllText(Path.Combine(screenFlowFolder, screenFlowConfig.WeaverClassname + CSHARP_CLASS_EXT),
                file);

            if (refreshAndSave)
            {
                AssetDatabase.Refresh();
                AssetDatabase.SaveAssets();
            }
        }

        public static List<ScreenFlowConfig> FindAllScreenFlowConfigs()
        {
            return FindAssetsByType<ScreenFlowConfig>();
        }

        public static List<T> FindAssetConfigNear<T>(ScreenFlowConfig screenFlowConfig) where T : Object
        {
            string screenFlowConfigPath = AssetDatabase.GetAssetPath(screenFlowConfig);
            string screenFlowFolder = Path.GetDirectoryName(screenFlowConfigPath);

            return FindAssetsByType<T>(screenFlowFolder);
        }

        public static List<T> FindAssetsByType<T>(params string[] inFolders) where T : Object
        {
            List<T> assets = new List<T>();
            string filter = "t:" + typeof(T).Name;
            string[] guids = AssetDatabase.FindAssets(filter, inFolders);
            for (int i = 0; i < guids.Length; i++)
            {
                string assetPath = AssetDatabase.GUIDToAssetPath(guids[i]);
                T asset = AssetDatabase.LoadAssetAtPath<T>(assetPath);
                if (asset != null)
                {
                    assets.Add(asset);
                }
            }

            return assets;
        }

        public static string CamelCaseToAllUpperWithUnderscores(string text)
        {
            List<char> characters = new List<char>();

            characters.AddRange(text.ToCharArray());

            for (int i = characters.Count - 1; i >= 0; i--)
            {
                if (Char.IsUpper(characters[i]) && i != 0)
                {
                    characters.Insert(i, '_');
                }

                characters[i] = Char.ToUpper(characters[i]);
            }

            return new string(characters.ToArray());
        }
    }
}
#endif